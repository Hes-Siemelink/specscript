Input parameters:
  title: Ticket title
  description: Description
  priority:
    description: Priority level
    enum: [ low, medium, high ]
    default: medium
  assignee:
    description: Assigned to
    default: unassigned


# Sanitize input by escaping single quotes
Replace:
  text: "'"
  in: ${input}
  with: "''"
As: ${input}

Connect to: Ticket DB

SQLite:
  update:
    - |
      -- Insert a new ticket with sequential ID (TICKET-###) and next backlog_order
      WITH next_id AS (
        SELECT COALESCE(MAX(CAST(substr(id,8) AS INTEGER)),0)+1 AS n FROM ticket
      )
      INSERT INTO ticket (
        id, title, description, state, priority, assignee,
        created_at, updated_at, backlog_order
      )
      SELECT
        'TICKET-' || printf('%03d', n) AS id,
        '${input.title}' AS title,
        '${input.description}' AS description,
        'todo' AS state,
        COALESCE(NULLIF('${input.priority}',''), 'medium') AS priority,
        NULLIF('${input.assignee}','') AS assignee,
        strftime('%Y-%m-%dT%H:%M:%fZ','now') AS created_at,
        strftime('%Y-%m-%dT%H:%M:%fZ','now') AS updated_at,
        (SELECT COALESCE(MAX(backlog_order),0)+1 FROM ticket) AS backlog_order
      FROM next_id;
  query: |
    -- Return the row just inserted. Uses the highest numeric suffix which matches the one we generated.
    SELECT
      id,
      title,
      description,
      state,
      priority,
      assignee,
      created_at,
      updated_at,
      backlog_order AS "order"
    FROM ticket
    WHERE id = (
      SELECT 'TICKET-' || printf('%03d', MAX(CAST(substr(id,8) AS INTEGER))) FROM ticket
    );
